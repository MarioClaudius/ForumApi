name: Continuous Integration
 
on: 
  pull_request:
    branches:
      - main
 
jobs:
  test:
    runs-on: ubuntu-latest

    # Docker Hub image that `container-job` executes in
    # container: node:10.18-jessie

    # Service containers to run with `container-job`
    services:
      # Label used to access the service container
      postgres:
        # Docker Hub image
        image: postgres
        # Provide the password for postgres
        env:
          # POSTGRES_USER: ${{ secrets.PGUSER_TEST }}
          POSTGRES_PASSWORD: postgres
          # POSTGRES_DB: ${{ secrets.PGPASSWORD_TEST }}   # tambahan dari stackoverflow
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          # Maps tcp port 5432 on service container to the host
          - 5432:5432
 
    strategy:
      matrix:
        node-version: [14.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/
 
    steps:
    - uses: actions/checkout@v2
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v2
      with:
        node-version: ${{ matrix.node-version }}
      #   heroku_api_key: ${{secrets.HEROKU_API_KEY}}
      #   heroku_app_name: "protected-island-39912" #Must be unique in Heroku
      #   heroku_email: "mcmario7901@gmail.com"
      #   branch: "dev"

    - name: create .env file
      run: |
        touch .env
        echo HOST="localhost" >> .env
        echo PORT="5000" >> .env
        echo PGHOST="localhost" >> .env
        echo PGUSER="postgres" >> .env
        echo PGDATABASE="postgres" >> .env
        echo PGPASSWORD="supersecretpassword" >> .env
        echo PGPORT="5432" >> .env
        echo PGHOST_TEST="localhost" >> .env
        echo PGUSER_TEST="postgres" >> .env
        echo PGDATABASE_TEST="postgres" >> .env
        echo PGPASSWORD_TEST="supersecretpassword" >> .env
        echo PGPORT_TEST="5432" >> .env
        echo ACCESS_TOKEN_KEY="8b7b4ef375716ab08b2a3951b29d52fc00b1c855f9d1a847229b8c5935bef56d9d271e76a9cf08e614300395c3b90ebe559cf968a0741b18c9505549394b2c70" >> .env
        echo REFRESH_TOKEN_KEY="5078605e074a462b1460608fcbe0d0963c644402e04ad334455ff5a856cb43fd99825861dde02957d5e3184c90c532ca7d0249df20fe93d535632f3d11be7bad" >> .env
        echo ACCESS_TOKEN_AGE="3000" >> .env
        cat .env
    # - name: Connect to PostgreSQL
    #     # Runs a script that creates a PostgreSQL table, populates
    #     # the table with data, and then retrieves the data.
    #   run: node src/app.js
    - name: npm install migrate and test
      run: |
        npm install
        npm run migrate up
        npm run test
      # env:
        # The hostname used to communicate with the PostgreSQL service container
        # POSTGRES_HOST: postgres
        # POSTGRES_DATABASE: forumapi
        # POSTGRES_USER: developer
        # POSTGRES_PASSWORD: supersecretpassword
        # The default PostgreSQL port
        # POSTGRES_PORT: 5432
        # CI: true
        # PGHOST_TEST: ${{ secrets.PGHOST_TEST }}
        # PGUSER_TEST: ${{ secrets.PGUSER_TEST }}
        # PGDATABASE_TEST: ${{ secrets.PGDATABASE_TEST }}
        # PGPASSWORD_TEST: ${{ secrets.PGPASSWORD_TEST }}
        # PGPORT_TEST: ${{ secrets.PGPORT_TEST }}
        # PGHOST: ${{ secrets.PGHOST_TEST }}
        # PGUSER: ${{ secrets.PGUSER_TEST }}
        # PGDATABASE: ${{ secrets.PGDATABASE_TEST }}
        # PGPASSWORD: ${{ secrets.PGPASSWORD_TEST }}
        # PGPORT: ${{ secrets.PGPORT_TEST }}
        # ACCESS_TOKEN_KEY: ${{ secrets.ACCESS_TOKEN_KEY }}
        # REFRESH_TOKEN_KEY: ${{ secrets.REFRESH_TOKEN_KEY }}
